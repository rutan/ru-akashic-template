// assetsディレクトリ以下のフォルダ内の画像をTexturePackerするやつ

const fs = require('fs');
const path = require('path');
const glob = require('glob');
const mkdirp = require('mkdirp');
const cpx = require('cpx');
const rimraf = require('rimraf');
const { execSync } = require('child_process');

const tmpDir = path.join(__dirname, '..', 'tmp', 'assets');
const relativeToTmp = path.relative('.', tmpDir);
const outputCodeDir = path.join(__dirname, '..', 'src', 'assets', 'textures');
const outputTextureDir = path.join(__dirname, '..', 'game', 'assets', 'textures');
mkdirp.sync(relativeToTmp);

function convert(packName) {
  const assetsJson = JSON.parse(fs.readFileSync(path.join(tmpDir, `assets_${packName}.json`), 'utf-8'));

  const { frames } = assetsJson;
  const assetsInfo = Object.keys(frames)
    .map((key) => {
      const data = frames[key];
      const { x: srcX, y: srcY, w: width, h: height } = data.frame;
      return [key.replace(/^([^\/]+)\//, ''), { srcX, srcY, width, height }];
    })
    .reduce((obj, [k, v]) => ({ ...obj, [k]: v }), {});

  const jsonFileName = `assets${packName.slice(0, 1).toUpperCase()}${packName.slice(1)}.json`;
  const jsonBody = {
    name: packName,
    path: `/assets/${path.basename(outputTextureDir)}/${packName}.png`,
    frames: assetsInfo,
  };

  fs.writeFileSync(path.join(outputCodeDir, jsonFileName), JSON.stringify(jsonBody, null, 2));

  return {
    jsonFileName,
    jsonBody,
  };
}

// 古い画像とJSONを削除する
rimraf.sync(path.join(outputTextureDir, '*.png'));
rimraf.sync(path.join(outputCodeDir, '*.json'));
rimraf.sync(path.join(outputCodeDir, 'index.ts'));

// assetsディレクトリ内の画像を処理する
const generatedJsonFileNames = [];
glob
  .sync(path.join(__dirname, '..', 'assets', '*'))
  .sort()
  .forEach((dir) => {
    if (!fs.statSync(dir).isDirectory()) return;

    const packName = path.basename(dir);
    execSync(
      `TexturePacker --sheet ${relativeToTmp}/${packName}.png --format json --data ${relativeToTmp}/assets_${packName}.json --trim-sprite-names --prepend-folder-name --max-size 2048 --border-padding 2 --disable-rotation --trim-mode None ./assets/${packName}/`
    );
    cpx.copy(`${relativeToTmp}/${packName}.png`, outputTextureDir, () => {
      console.log(`[done] ${packName} (copy)`);
    });

    const { jsonFileName } = convert(path.basename(dir));
    generatedJsonFileNames.push(jsonFileName);
  });

// index.tsを更新
const generatedCode = `// This code was generated by convertAssets.js

${
  generatedJsonFileNames.map((jsonFileName) => {
    return `import * as ${jsonFileName.replace(/\.json$/, '')} from './${jsonFileName}';`;
  }).join('\n')
}

export {
  ${generatedJsonFileNames.map((jsonFileName) => jsonFileName.replace(/\.json$/, '')).join(',\n  ')}
};
`
fs.writeFileSync(path.join(outputCodeDir, 'index.ts'), generatedCode);
